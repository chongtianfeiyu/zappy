{
  "name": "stdio",
  "version": "0.1.6",
  "description": "Module for standard input/output management with NodeJS",
  "keywords": [
    "input",
    "console",
    "output",
    "terminal",
    "system"
  ],
  "homepage": "http://sgmonda.github.io/stdio/",
  "license": "MIT",
  "main": "main.js",
  "author": {
    "name": "Sergio Garcia Mondaray",
    "email": "sgmonda@gmail.com",
    "url": "http://www.sgmonda.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/sgmonda/stdio"
  },
  "engines": {
    "node": "*"
  },
  "readmeFilename": "README.md",
  "scripts": {
    "test": "node test/tests.js < test/lipsum.txt"
  },
  "readme": "Module for input/output management with nodejs.\n\n[![Build Status](https://secure.travis-ci.org/sgmonda/stdio.png)](http://travis-ci.org/sgmonda/stdio)\n\nWebsite: http://sgmonda.github.io/stdio/\n\n[![NPM](https://nodei.co/npm/stdio.png)](https://nodei.co/npm/stdio/)\n\n## 1. Installation\n\nTo install the most recent release from npm, run:\n\n    npm install stdio\n\n## 2. Usage\n\nYou can do many things with this module:\n* Parse UNIX-like command line options\n* Read standard input at once\n* Make prompt questions\n\n### 2.1. Parse Unix-like command line options\n\n```javascript\nvar stdio = require('stdio');\nvar ops = stdio.getopt({\n    'check': {key: 'c', args: 2, description: 'What this option means'},\n    'map': {key: 'm', description: 'Another description', mandatory: true},\n    'kaka': {key: 'k', args: 2, mandatory: true},\n    'ooo': {key: 'o'}\n});\nconsole.log(ops);\n```\n\nIf you run the previous example with the command\n\n    node pruebas.js -c 23 45 88 --map -k 23 44 cosa\n\nProgram output will be:\n\n    { check: [ '23', '45' ],\n      args: [ '88', 'cosa' ],\n      map: true,\n      kaka: [ '23', '44' ] }\n\nSo you can check options:\n\n```javascript\nif(ops.map){\n    // Your action\n}\nif(ops.kaka){\n    // Your action, using ops.kaka[0] or ops.kaka[1] or...\n}\n```\n\nAs you can see, every option in `ops` object can has 3 different type of values:\n\n* The boolean value `true` if it has been specified without an `args` attribute.\n* A single `string` if it has been specified with `args: 1`.\n* A `string` array, if it has been specified with `args` >= 2.\n\n#### Print usage\n\nThis module can generate an usage message automatically. You can use it when user specifies `--help` option, which is automatically supported. This code:\n\n```javascript\nvar stdio = require('stdio');\n\nvar ops = stdio.getopt({\n\tuna: {description: 'Sets something to some value', key: 'u', args: 2, mandatory: true},\n\totra_muy_larga: {description: 'A boolean flag', key: 'o', mandatory: true},\n\tuna_sin_desc: {description: 'Another boolean flag'},\n\tultima: {description: 'A description', key: 'u', args: 1}\n}, '[FILE1] [FILE2] ...'); // Optional extra arguments description\n```\n\nwill produce the following output (if it is called with `--help` flag):\n\n```\nUSAGE: node something.js [OPTIONS] [FILE1] [FILE2] ...\n  -u, --una <ARG1> <ARG2> \tSets something to some value (mandatory)\n  -o, --otra_muy_larga    \tA boolean flag (mandatory)\n  --una_sin_desc          \tAnother boolean flag\n  -u, --ultima <ARG1>     \tA description\n```\n\nIf a non-spected option is given or a mandatory option is not, an error (followed by the usage message) will be shown, finishing your program automatically. It's cool, isn`t it?\n\n### 2.2. Read standard input at once\n\nThis simple following code will read the whole standard input.\n\n```javascript\nvar stdio = require('stdio');\nstdio.read(function(data){\n    console.log(data);\n});\n```\n\nObviously it is not recommended for huge input files.\n\n### 2.3. Show prompt questions and wait user's answer\n\n```javascript\nvar stdio = require('stdio');\nstdio.question('This is a question?', ['y', 'n'], function (err, answer) {\n    // Use answer here\n});\n```\n\nThe previous code will show something like the following:\n\n````\nThis is a question? [y/n]:\n````\n\nand waits until user enters an answer. There will be 3 retries before reporting an error by mean of the callback.\n\n## 3. Testing\n\nTo run tests, use the following command from module's root:\n\n````\nnpm test\n````\n\n## Changelog\n\n### 0.1.6\n\n* Arguments now can have \"=\" sign escaped: `node program.js -m loc.ark+\\\\=13960\\\\=t0000693r.meta.json` will give the following:\n````\n{\n  createHelp: [Function],\n  printHelp: [Function],\n  meta: 'loc.ark+=13960=t0000693r.meta.json'\n}\n````\n\n### 0.1.5\n\n* Added support for prompt questions without options\n\n### 0.1.4\n\n* New fancy feature! Now you can show simple prompts to interact with users by mean of a question.\n* Old printf-like feature has been removed.\n\n### 0.1.3\n\n* Support for extended large options added. Now it is possible to write `--anoption=44` instead of `--anoption 44`. This works only for options with a single parameter.\n\n### 0.1.2\n\n* Bug fix: Negative numbers as parameters caused wrong errors.\n\n### 0.1.1\n\n* Grouped short options support added (for boolean flags). Now you can write `-abc` instead of `-a -b -c`.\n* Usage message has been simplified. Extra arguments description is supported now.\n\n### 0.1.0\n\n* If an option is specified with less arguments than the specified, an error (and the help message) is shown and program finishes.\n* Captured options now has 3 possible values: `true`, a single `string` or an array of `strings`. Much easier to use than in previous releases (but incompatible with them, so be careful updating).\n\n## Projects using `stdio` module\n\nThe following projects are currently using `stdio` module:\n\n* mammock: https://github.com/earmbrust/mammock\n* sqsmonitor: https://github.com/hasallen/sqsmonitor\n* frejus: https://npmjs.org/package/frejus\n* cli-mirror: https://www.npmjs.org/package/cli_mirror\n* parser-energymech: https://www.npmjs.org/package/parser-energymech\n* tool-twist: https://www.npmjs.org/package/tooltwist\n* vtools-cli: https://www.npmjs.org/package/vtools-cli\n\nIf you use this module in your project, please, let us know.\n",
  "_id": "stdio@0.1.6",
  "_from": "stdio@"
}
